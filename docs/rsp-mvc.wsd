@startuml rsp-mvc
skinparam monochrome reverse
package rockpaperscissor{
    class RPSApp{
        -RPSGame game
        -RPSGameController gameController

        +RPSApp()
        +void executeGame()
    }
    package model{
        class Player{
            -String name
            -int score
            -PlayerType type

            +Player(String name, int score, PlayerType type)
        }
        class Round{
            -Player playerA
            -Player playerB
            -final int totalRounds
        }
        class RPSGame{
            -Round round
            +void newGame
            +Round getRound()
        }
        class Statistics{
            -ArrayList<StatisticItem> statistics
            +Statistic()
        }
        class StatisticItem{
            -int round
            -String playerA
            -Shape playerAShape
            -String playerB
            -Shape playerBShape

            +StatisticItem(int round, String playerA, Shape playerAShape, String playerB, Shape playerBShape)
        }
    }

    package controller{
        package player{
            class PlayerAdminController{
                -ArrayList<Player> playersList
                -PlayerController[] playersControllers
                +Player[] getGamePlayers

                +PlayerAdminController()
                +void initGame()
                -void addPlayer()
                -Player searchPlayer(Player newPlayer)
                -Player searchPlayer(String name)
                -void setGamePlayer()
                -boolean arePlayersDuplicates()
            }

            class PlayerControllerFactory{
                +static PlayerController getPlayerController(PLayerType playerType)
            }

            abstract class PlayerController{
                -Player player
                #PlayersView playerView
                #PlayerType playerType

                +PlayerController()
                +abstract Shape selectShape()
                +abstract PlayerView initPlayerView()
                +abstract PlayerType initPlayerType()
                +void increaseScore()
            }

            class HumanController{
                +Shape selectShape()
                +PlayerView initPlayerView
                +PlayerType initPlayerType
            }

            class ComputerController{
                +Shape selectShape()
                +PlayerView initPlayerView
                +PlayerType initPlayerType
            }
        }

        class RoundController{
            -RoundView roundView
            -Round round
            -static int roundCounter
            -PlayerController[] playerController
            -StatisticController statisticController

            +RoundController()
            +void determinateWinner(Player playerA, Player playerB)
            +void initGame()
            +void setStatisticController(StatisticController statisticController)
        }

        class RSPGameController{
            -RPSGame game
            -RPSGameView gameView
            -PlayerAdminController playerAdminController
            -PlayerController[] playersController
            -RoundController roundController
            -StatisticController statisticController

            +RPSGameController(RPSGame game)
            +void setup()
            +void initGame()
            +void statistics()
        }

        class StatisticController{
            -ArrayList<StatisticItem> statistics;
            -StatisticView statisticView;

            +StatisticController()
            +addStatistic(StatisticItem item)
            +showStatistics()
        }
    }

    package utils{
        Enum Shape{
            ROCK
            SCISSOR
            PAPER

            +static boolean winsWith(Shape shape1, Shape shape2)
        }
        Enum PlayerType{
            HUMAN
            CONPUTER
        }
    }
    package view{
        package player{
            class PlayerView{
                +abstract String getName()
                +abstract Shape selectShape()
            }
            class HumanPlayerView{
                +String getName()
                +Shape selectShape()
            }
            class ComputerPlayerView{
                +String getName()
                +Shape selectShape()
                +static String getRandomString(int n)
            }
            class PlayerAdminView{
                +int showMainMenu()
                -PlayerType selectPlayerType()
                +Player setPlayerInfo()
                +void existingPlayerMessage()
                +void showPlayers(ArraList<Player> playersList)
                +String selectGamePlayers(int numberOfPlayers)
                +void duplicateErrorMassage
            }
            class PlayerViewFactory{
                +static PlayerView getPlayerView(PlayerType playerType)
            }
        }

        class RSPGameView{
            +static void play(String playerAName,String playerBName)
            +void showWinner(Player winner)
            +void showMainWindow()
        }

        class RoundView{
            +void executeRound(int round, String name)
            +void showRoundWinner(Player winner)
            +void showTie()
        }
        class StatisticView{
            +showStatistics(ArrayList<StatisticItem> statistics)
        }
    }
}

RPSGame --> Player
RPSGame --> Round
Statistics *-- StatisticItem

RSPGameController *-- RPSGame
RSPGameController *-- PlayerController
RSPGameController *-- RoundController
RSPGameController *-- StatisticController
RoundController *-- Round
RoundController --> PlayerController
RoundController --> StatisticController
ComputerController --|> PlayerController
HumanController --|> PlayerController
RSPGameController --> RSPGameView

RPSApp *-- RSPGameController

RSPGameView ..> RoundView
RoundView ..> PlayerView
RoundView ..> StatisticView

HumanPlayerView --|> PlayerView
ComputerPlayerView --|> PlayerView

PlayerAdminView --> PlayerViewFactory
PlayerAdminController --> PlayerAdminView
PlayerAdminController --> PlayerControllerFactory
RSPGameController *-- PlayerAdminController
StatisticController *-- Statistics
PlayerController *-- Player

@enduml